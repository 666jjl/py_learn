
	tup1 = ('physics', 'chemistry', 1997, 2000);
	
	tup2 = (1, 2, 3, 4, 5 );
	
	tup3 = "a", "b", "c", "d";
	
	创建空元组
	
	tup1 = ();
	
	元组中只包含一个元素时，需要在元素后面添加逗号
	
	tup1 = (50,);
	



元组内元素不可被修改

tup[0]=100这种操作是非法的



访问元组


	print "tup1[0]: ", tup1[0]
	
	print "tup1[-1]: ", tup1[-1]
	
	print "tup2[1:5]: ", tup2[1:5]
	
	以上实例输出结果：
	
	tup1[0]:  physics
	
	tup1[-1]: 2000
	
	tup2[1:5]:  (2, 3, 4, 5)
	

#元组也是种序列,可以逆向索引 , 例中tup1[0]=tup1[-4]



元组拼接


	# 创建一个新的元组
	
	tup3 = tup1 + tup2;
	
	print tup3;
	

#以上实例输出结果：

('physics', 'chemistry', 1997, 2000, 1, 2, 3, 4, 5)



删除元组

del <tuple>




	元组运算符
	
	与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。
	
	Python 表达式                         结果                                    描述
	
	len((1, 2, 3))                                 3                                  计算元素个数
	
	(1, 2, 3) + (4, 5, 6)                (1, 2, 3, 4, 5, 6)                连接
	
	('Hi!',) * 4                          ('Hi!', 'Hi!', 'Hi!', 'Hi!')              复制
	
	3 in (1, 2, 3)                                True                            元素是否存在
	
	for x in (1, 2, 3): print x,        1 2 3                                迭代
	





比较两个元组元素


	        cmp(tuple1, tuple2)
	
	计算元组元素个数
	
	        len(tuple)
	
	返回元组中元素最大值
	
	        max(tuple)
	
	返回元组中元素最小值
	
	        min(tuple)
	
	将列表转换为元组
	
	        tuple(seq)
	
	
	












