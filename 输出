
	eng = 'jjleo'
	
	chn = '李俊杰'
	
	
	
	#打印及中文
	
	#1.1
	
	print "my english name is jjleo.\n"
	
	
	
	
		my english name is jjleo.
		
		
		
	
	#1.2
	
	print r"my english name is jjleo.\n" #r表示不使用转义,完全打印字符串内容
	
	
	
	my english name is jjleo.\n
	
	#1.3
	
	print u"my chinese name is 李俊杰." #直接打印中文,在前面声明u,即unicode编码
	
	或者在文件开头加 # -*- coding: UTF-8 -*- 或者 #coding=utf-8 就行了,同时需要修改编译器的文件编码方式为utf-8
	
	
	
	my chinese name is 李俊杰.
	
	#2.1
	
	print "my english name is %s.And my chinese name is %s."%(eng,chn.decode("utf-8"))
	
	#中文字符必须另编码,这里的utf-8视文件编码方式改变
	
	my english name is jjleo.And my chinese name is 李俊杰.
	
	#2.2
	
	print("my english name is %(englishname)s.And %(englishname)s's chinese name is %(chinesename)s."\
	
	      %({"englishname":eng,"chinesename":chn.decode("utf-8")}))
	
	#起别名既可以方便读者理解含义又可以免去重复参数的多次输入了
	




	my english name is jjleo.And jjleo's chinese name is 李俊杰.
	
	
	
	字符串格式化
	


	
		
			
				    符   号
				
				描述
				
			
			
				      %c
				
				 格式化字符及其ASCII码
				
			
			
				      %s
				
				 格式化字符串
				
			
			
				      %d
				
				 格式化整数
				
			
			
				      %u
				
				 格式化无符号整型
				
			
			
				      %o
				
				 格式化无符号八进制数
				
			
			
				      %x
				
				 格式化无符号十六进制数
				
			
			
				      %X
				
				 格式化无符号十六进制数（大写）
				
			
			
				      %f
				
				 格式化浮点数字，可指定小数点后的精度
				
			
			
				      %e
				
				 用科学计数法格式化浮点数
				
			
			
				      %E
				
				 作用同%e，用科学计数法格式化浮点数
				
			
			
				      %g
				
				 %f和%e的简写
				
			
			
				      %G
				
				 %f 和 %E 的简写
				
			
			
				      %p
				
				 用十六进制数格式化变量的地址
				
			
		
	

格式化操作符辅助指令:


	
		
			
				符号
				
				功能
				
			
			
				*
				
				定义宽度或者小数点精度
				
			
			
				-
				
				用做左对齐
				
			
			
				+
				
				在正数前面显示加号( + )
				
			
			
				<sp>
				
				在正数前面显示空格
				
			
			
				#
				
				在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')
				
			
			
				0
				
				显示的数字前面填充'0'而不是默认的空格
				
			
			
				%
				
				'%%'输出一个单一的'%'
				
			
			
				(var)
				
				映射变量(字典参数)
				
			
			
				m.n.
				
				m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)
				
			
		
	
	Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。
	








